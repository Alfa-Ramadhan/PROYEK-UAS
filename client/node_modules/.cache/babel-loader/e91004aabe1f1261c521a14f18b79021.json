{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kuliah\\\\Semester 6\\\\Topik Khusus\\\\MovieStore\\\\client\\\\src\\\\pages\\\\Public\\\\BookingPage\\\\BookingPage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles, Grid, Container } from '@material-ui/core';\nimport { getMovie, getCinemasUserModeling, getCinema, getCinemas, getShowtimes, getReservations, getSuggestedReservationSeats, setSelectedSeats, setSelectedCinema, setSelectedDate, setSelectedTime, setInvitation, toggleLoginPopup, showInvitationForm, resetCheckout, setAlert, addReservation, setSuggestedSeats, setQRCode } from '../../../store/actions';\nimport { ResponsiveDialog } from '../../../components';\nimport LoginForm from '../Login/components/LoginForm';\nimport styles from './styles';\nimport MovieInfo from './components/MovieInfo/MovieInfo';\nimport BookingForm from './components/BookingForm/BookingForm';\nimport BookingSeats from './components/BookingSeats/BookingSeats';\nimport BookingCheckout from './components/BookingCheckout/BookingCheckout';\nimport BookingInvitation from './components/BookingInvitation/BookingInvitation';\nimport jsPDF from 'jspdf';\nclass BookingPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.didSetSuggestion = false;\n    // JSpdf Generator For generating the PDF\n    this.jsPdfGenerator = () => {\n      const {\n        movie,\n        cinema,\n        selectedDate,\n        selectedTime,\n        QRCode\n      } = this.props;\n      const doc = new jsPDF();\n      doc.setFont('helvetica');\n      doc.setFontType('bold');\n      doc.setFontSize(22);\n      doc.text(movie.title, 20, 20);\n      doc.setFontSize(16);\n      doc.text(cinema.name, 20, 30);\n      doc.text(`Date: ${new Date(selectedDate).toLocaleDateString()} - Time: ${selectedTime}`, 20, 40);\n      doc.addImage(QRCode, 'JPEG', 15, 40, 160, 160);\n      doc.save(`${movie.title}-${cinema.name}.pdf`);\n    };\n    this.onSelectSeat = (row, seat) => {\n      const {\n        cinema,\n        setSelectedSeats\n      } = this.props;\n      const seats = [...cinema.seats];\n      const newSeats = [...seats];\n      if (seats[row][seat] === 1) {\n        newSeats[row][seat] = 1;\n      } else if (seats[row][seat] === 2) {\n        newSeats[row][seat] = 0;\n      } else if (seats[row][seat] === 3) {\n        newSeats[row][seat] = 2;\n      } else {\n        newSeats[row][seat] = 2;\n      }\n      setSelectedSeats([row, seat]);\n    };\n    this.onGetReservedSeats = () => {\n      const {\n        reservations,\n        cinema,\n        selectedDate,\n        selectedTime\n      } = this.props;\n      if (!cinema) return [];\n      const newSeats = [...cinema.seats];\n      const filteredReservations = reservations.filter(reservation => new Date(reservation.date).toLocaleDateString() === new Date(selectedDate).toLocaleDateString() && reservation.startAt === selectedTime);\n      if (filteredReservations.length && selectedDate && selectedTime) {\n        const reservedSeats = filteredReservations.map(reservation => reservation.seats).reduce((a, b) => a.concat(b));\n        reservedSeats.forEach(([row, seat]) => newSeats[row][seat] = 1);\n        return newSeats;\n      }\n      return newSeats;\n    };\n    this.onGetSuggestedSeats = (seats, suggestedSeats) => {\n      const {\n        numberOfTickets,\n        positions\n      } = suggestedSeats;\n      const positionsArray = Object.keys(positions).map(key => {\n        return [String(key), positions[key]];\n      });\n      positionsArray.sort((a, b) => {\n        return b[1] - a[1];\n      });\n      if (positionsArray.every(position => position[1] === 0)) return;\n      const step = Math.round(seats.length / 3);\n      let indexArr = [];\n      let suggested;\n      for (let position of positionsArray) {\n        switch (position[0]) {\n          case 'front':\n            indexArr = [0, step];\n            suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n            break;\n          case 'center':\n            indexArr = [step, step * 2];\n            suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n            break;\n          case 'back':\n            indexArr = [step * 2, step * 3];\n            suggested = this.checkSeats(indexArr, seats, numberOfTickets);\n            break;\n          default:\n            break;\n        }\n        if (suggested) this.getSeat(suggested, seats, numberOfTickets);\n        break;\n      }\n    };\n    this.checkSeats = (indexArr, seats, numberOfTickets) => {\n      for (let i = indexArr[0]; i < indexArr[1]; i++) {\n        for (let seat in seats[i]) {\n          let seatNum = Number(seat);\n          if (!seats[i][seatNum] && seatNum + (numberOfTickets - 1) <= seats[i].length) {\n            let statusAvailability = [];\n            for (let y = 1; y < numberOfTickets; y++) {\n              //check the next seat if available\n              if (!seats[i][seatNum + y]) {\n                statusAvailability.push(true);\n              } else {\n                statusAvailability.push(false);\n              }\n            }\n            if (statusAvailability.every(Boolean)) return [i, seatNum];\n          }\n        }\n      }\n      return null;\n    };\n    this.getSeat = (suggested, seats, numberOfTickets) => {\n      const {\n        setSuggestedSeats\n      } = this.props;\n      for (let i = suggested[1]; i < suggested[1] + numberOfTickets; i++) {\n        const seat = [suggested[0], i];\n        setSuggestedSeats(seat);\n      }\n    };\n    this.onChangeCinema = event => this.props.setSelectedCinema(event.target.value);\n    this.onChangeDate = date => this.props.setSelectedDate(date);\n    this.onChangeTime = event => this.props.setSelectedTime(event.target.value);\n    this.sendInvitations = async () => {\n      const invitations = this.createInvitations();\n      if (!invitations) return;\n      try {\n        const token = localStorage.getItem('jwtToken');\n        const url = '/invitations';\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(invitations)\n        });\n        if (response.ok) {\n          this.props.resetCheckout();\n          this.props.setAlert('invitations Send', 'success', 5000);\n          return {\n            status: 'success',\n            message: 'invitations Send'\n          };\n        }\n      } catch (error) {\n        this.props.setAlert(error.message, 'error', 5000);\n        return {\n          status: 'error',\n          message: ' invitations have not send, try again.'\n        };\n      }\n    };\n    this.createInvitations = () => {\n      const {\n        user,\n        movie,\n        cinema,\n        selectedDate,\n        selectedTime,\n        invitations\n      } = this.props;\n      const invArray = Object.keys(invitations).map(key => ({\n        to: invitations[key],\n        host: user.name,\n        movie: movie.title,\n        time: selectedTime,\n        date: new Date(selectedDate).toDateString(),\n        cinema: cinema.name,\n        image: cinema.image,\n        seat: key\n      })).filter(inv => inv.to !== '');\n      return invArray;\n    };\n    this.setSuggestionSeats = (seats, suggestedSeats) => {\n      suggestedSeats.forEach(suggestedSeat => {\n        seats[suggestedSeat[0]][suggestedSeat[1]] = 3;\n      });\n      return seats;\n    };\n  }\n  componentDidMount() {\n    const {\n      user,\n      match,\n      getMovie,\n      getCinemas,\n      getCinemasUserModeling,\n      getShowtimes,\n      getReservations,\n      getSuggestedReservationSeats\n    } = this.props;\n    getMovie(match.params.id);\n    user ? getCinemasUserModeling(user.username) : getCinemas();\n    getShowtimes();\n    getReservations();\n    if (user) getSuggestedReservationSeats(user.username);\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      selectedCinema,\n      selectedDate,\n      getCinema\n    } = this.props;\n    if (selectedCinema && prevProps.selectedCinema !== selectedCinema || selectedCinema && prevProps.selectedDate !== selectedDate) {\n      getCinema(selectedCinema);\n    }\n  }\n  async checkout() {\n    const {\n      movie,\n      cinema,\n      selectedSeats,\n      selectedDate,\n      selectedTime,\n      getReservations,\n      isAuth,\n      user,\n      addReservation,\n      toggleLoginPopup,\n      showInvitationForm,\n      setQRCode\n    } = this.props;\n    if (selectedSeats.length === 0) return;\n    if (!isAuth) return toggleLoginPopup();\n    const response = await addReservation({\n      date: selectedDate,\n      startAt: selectedTime,\n      seats: this.bookSeats(),\n      ticketPrice: cinema.ticketPrice,\n      total: selectedSeats.length * cinema.ticketPrice,\n      movieId: movie._id,\n      cinemaId: cinema._id,\n      username: user.username,\n      phone: user.phone\n    });\n    if (response.status === 'success') {\n      const {\n        data\n      } = response;\n      setQRCode(data.QRCode);\n      getReservations();\n      showInvitationForm();\n    }\n  }\n  bookSeats() {\n    const {\n      cinema,\n      selectedSeats\n    } = this.props;\n    const seats = [...cinema.seats];\n    if (selectedSeats.length === 0) return;\n    const bookedSeats = seats.map(row => row.map((seat, i) => seat === 2 ? i : -1).filter(seat => seat !== -1)).map((seats, i) => seats.length ? seats.map(seat => [i, seat]) : -1).filter(seat => seat !== -1).reduce((a, b) => a.concat(b));\n    return bookedSeats;\n  }\n  onFilterCinema() {\n    const {\n      cinemas,\n      showtimes,\n      selectedCinema,\n      selectedTime\n    } = this.props;\n    const initialReturn = {\n      uniqueCinemas: [],\n      uniqueTimes: []\n    };\n    if (!showtimes || !cinemas) return initialReturn;\n    const uniqueCinemasId = showtimes.filter(showtime => selectedTime ? showtime.startAt === selectedTime : true).map(showtime => showtime.cinemaId).filter((value, index, self) => self.indexOf(value) === index);\n    const uniqueCinemas = cinemas.filter(cinema => uniqueCinemasId.includes(cinema._id));\n    const uniqueTimes = showtimes.filter(showtime => selectedCinema ? selectedCinema === showtime.cinemaId : true).map(showtime => showtime.startAt).filter((value, index, self) => self.indexOf(value) === index).sort((a, b) => new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b));\n    return {\n      ...initialReturn,\n      uniqueCinemas,\n      uniqueTimes\n    };\n  }\n  render() {\n    const {\n      classes,\n      user,\n      movie,\n      cinema,\n      showtimes,\n      selectedSeats,\n      selectedCinema,\n      selectedDate,\n      selectedTime,\n      showLoginPopup,\n      toggleLoginPopup,\n      showInvitation,\n      invitations,\n      setInvitation,\n      resetCheckout,\n      suggestedSeats,\n      suggestedSeat\n    } = this.props;\n    const {\n      uniqueCinemas,\n      uniqueTimes\n    } = this.onFilterCinema();\n    let seats = this.onGetReservedSeats();\n    if (suggestedSeats && selectedTime && !suggestedSeat.length) {\n      this.onGetSuggestedSeats(seats, suggestedSeats);\n    }\n    if (suggestedSeat.length && !this.didSetSuggestion) {\n      seats = this.setSuggestionSeats(seats, suggestedSeat);\n      this.didSetSuggestion = true;\n    }\n    return /*#__PURE__*/React.createElement(Container, {\n      maxWidth: \"xl\",\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MovieInfo, {\n      movie: movie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      lg: 9,\n      xs: 12,\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BookingForm, {\n      cinemas: uniqueCinemas,\n      times: uniqueTimes,\n      showtimes: showtimes,\n      selectedCinema: selectedCinema,\n      selectedDate: selectedDate,\n      selectedTime: selectedTime,\n      onChangeCinema: this.onChangeCinema,\n      onChangeDate: this.onChangeDate,\n      onChangeTime: this.onChangeTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 13\n      }\n    }), showInvitation && !!selectedSeats.length && /*#__PURE__*/React.createElement(BookingInvitation, {\n      selectedSeats: selectedSeats,\n      sendInvitations: this.sendInvitations,\n      ignore: resetCheckout,\n      invitations: invitations,\n      onSetInvitation: setInvitation,\n      onDownloadPDF: this.jsPdfGenerator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 15\n      }\n    }), cinema && selectedCinema && selectedTime && !showInvitation && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BookingSeats, {\n      seats: seats,\n      onSelectSeat: (indexRow, index) => this.onSelectSeat(indexRow, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BookingCheckout, {\n      user: user,\n      ticketPrice: cinema.ticketPrice,\n      seatsAvailable: cinema.seatsAvailable,\n      selectedSeats: selectedSeats.length,\n      onBookSeats: () => this.checkout(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(ResponsiveDialog, {\n      id: \"Edit-cinema\",\n      open: showLoginPopup,\n      handleClose: () => toggleLoginPopup(),\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LoginForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }\n    })));\n  }\n}\nBookingPage.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\nconst mapStateToProps = ({\n  authState,\n  movieState,\n  cinemaState,\n  showtimeState,\n  reservationState,\n  checkoutState\n}, ownProps) => ({\n  isAuth: authState.isAuthenticated,\n  user: authState.user,\n  movie: movieState.selectedMovie,\n  cinema: cinemaState.selectedCinema,\n  cinemas: cinemaState.cinemas,\n  showtimes: showtimeState.showtimes.filter(showtime => showtime.movieId === ownProps.match.params.id),\n  reservations: reservationState.reservations,\n  selectedSeats: checkoutState.selectedSeats,\n  suggestedSeat: checkoutState.suggestedSeat,\n  selectedCinema: checkoutState.selectedCinema,\n  selectedDate: checkoutState.selectedDate,\n  selectedTime: checkoutState.selectedTime,\n  showLoginPopup: checkoutState.showLoginPopup,\n  showInvitation: checkoutState.showInvitation,\n  invitations: checkoutState.invitations,\n  QRCode: checkoutState.QRCode,\n  suggestedSeats: reservationState.suggestedSeats\n});\nconst mapDispatchToProps = {\n  getMovie,\n  getCinema,\n  getCinemasUserModeling,\n  getCinemas,\n  getShowtimes,\n  getReservations,\n  getSuggestedReservationSeats,\n  addReservation,\n  setSelectedSeats,\n  setSuggestedSeats,\n  setSelectedCinema,\n  setSelectedDate,\n  setSelectedTime,\n  setInvitation,\n  toggleLoginPopup,\n  showInvitationForm,\n  resetCheckout,\n  setAlert,\n  setQRCode\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(BookingPage));","map":{"version":3,"names":["React","Component","PropTypes","connect","withStyles","Grid","Container","getMovie","getCinemasUserModeling","getCinema","getCinemas","getShowtimes","getReservations","getSuggestedReservationSeats","setSelectedSeats","setSelectedCinema","setSelectedDate","setSelectedTime","setInvitation","toggleLoginPopup","showInvitationForm","resetCheckout","setAlert","addReservation","setSuggestedSeats","setQRCode","ResponsiveDialog","LoginForm","styles","MovieInfo","BookingForm","BookingSeats","BookingCheckout","BookingInvitation","jsPDF","BookingPage","constructor","args","didSetSuggestion","jsPdfGenerator","movie","cinema","selectedDate","selectedTime","QRCode","props","doc","setFont","setFontType","setFontSize","text","title","name","Date","toLocaleDateString","addImage","save","onSelectSeat","row","seat","seats","newSeats","onGetReservedSeats","reservations","filteredReservations","filter","reservation","date","startAt","length","reservedSeats","map","reduce","a","b","concat","forEach","onGetSuggestedSeats","suggestedSeats","numberOfTickets","positions","positionsArray","Object","keys","key","String","sort","every","position","step","Math","round","indexArr","suggested","checkSeats","getSeat","i","seatNum","Number","statusAvailability","y","push","Boolean","onChangeCinema","event","target","value","onChangeDate","onChangeTime","sendInvitations","invitations","createInvitations","token","localStorage","getItem","url","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","status","message","error","user","invArray","to","host","time","toDateString","image","inv","setSuggestionSeats","suggestedSeat","componentDidMount","match","params","id","username","componentDidUpdate","prevProps","selectedCinema","checkout","selectedSeats","isAuth","bookSeats","ticketPrice","total","movieId","_id","cinemaId","phone","data","bookedSeats","onFilterCinema","cinemas","showtimes","initialReturn","uniqueCinemas","uniqueTimes","uniqueCinemasId","showtime","index","self","indexOf","includes","render","classes","showLoginPopup","showInvitation","createElement","maxWidth","className","container","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","spacing","style","height","item","lg","xs","md","times","ignore","onSetInvitation","onDownloadPDF","Fragment","indexRow","seatsAvailable","onBookSeats","open","handleClose","propTypes","string","object","isRequired","history","mapStateToProps","authState","movieState","cinemaState","showtimeState","reservationState","checkoutState","ownProps","isAuthenticated","selectedMovie","mapDispatchToProps"],"sources":["C:/Kuliah/Semester 6/Topik Khusus/MovieStore/client/src/pages/Public/BookingPage/BookingPage.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, Grid, Container } from '@material-ui/core';\r\nimport {\r\n  getMovie,\r\n  getCinemasUserModeling,\r\n  getCinema,\r\n  getCinemas,\r\n  getShowtimes,\r\n  getReservations,\r\n  getSuggestedReservationSeats,\r\n  setSelectedSeats,\r\n  setSelectedCinema,\r\n  setSelectedDate,\r\n  setSelectedTime,\r\n  setInvitation,\r\n  toggleLoginPopup,\r\n  showInvitationForm,\r\n  resetCheckout,\r\n  setAlert,\r\n  addReservation,\r\n  setSuggestedSeats,\r\n  setQRCode\r\n} from '../../../store/actions';\r\nimport { ResponsiveDialog } from '../../../components';\r\nimport LoginForm from '../Login/components/LoginForm';\r\nimport styles from './styles';\r\nimport MovieInfo from './components/MovieInfo/MovieInfo';\r\nimport BookingForm from './components/BookingForm/BookingForm';\r\nimport BookingSeats from './components/BookingSeats/BookingSeats';\r\nimport BookingCheckout from './components/BookingCheckout/BookingCheckout';\r\nimport BookingInvitation from './components/BookingInvitation/BookingInvitation';\r\n\r\nimport jsPDF from 'jspdf';\r\n\r\nclass BookingPage extends Component {\r\n  didSetSuggestion = false;\r\n\r\n  componentDidMount() {\r\n    const {\r\n      user,\r\n      match,\r\n      getMovie,\r\n      getCinemas,\r\n      getCinemasUserModeling,\r\n      getShowtimes,\r\n      getReservations,\r\n      getSuggestedReservationSeats\r\n    } = this.props;\r\n    getMovie(match.params.id);\r\n    user ? getCinemasUserModeling(user.username) : getCinemas();\r\n    getShowtimes();\r\n    getReservations();\r\n    if (user) getSuggestedReservationSeats(user.username);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { selectedCinema, selectedDate, getCinema } = this.props;\r\n    if (\r\n      (selectedCinema && prevProps.selectedCinema !== selectedCinema) ||\r\n      (selectedCinema && prevProps.selectedDate !== selectedDate)\r\n    ) {\r\n      getCinema(selectedCinema);\r\n    }\r\n  }\r\n\r\n  // JSpdf Generator For generating the PDF\r\n  jsPdfGenerator = () => {\r\n    const { movie, cinema, selectedDate, selectedTime, QRCode } = this.props;\r\n    const doc = new jsPDF();\r\n    doc.setFont('helvetica');\r\n    doc.setFontType('bold');\r\n    doc.setFontSize(22);\r\n    doc.text(movie.title, 20, 20);\r\n    doc.setFontSize(16);\r\n    doc.text(cinema.name, 20, 30);\r\n    doc.text(\r\n      `Date: ${new Date(\r\n        selectedDate\r\n      ).toLocaleDateString()} - Time: ${selectedTime}`,\r\n      20,\r\n      40\r\n    );\r\n    doc.addImage(QRCode, 'JPEG', 15, 40, 160, 160);\r\n    doc.save(`${movie.title}-${cinema.name}.pdf`);\r\n  };\r\n\r\n  onSelectSeat = (row, seat) => {\r\n    const { cinema, setSelectedSeats } = this.props;\r\n    const seats = [...cinema.seats];\r\n    const newSeats = [...seats];\r\n    if (seats[row][seat] === 1) {\r\n      newSeats[row][seat] = 1;\r\n    } else if (seats[row][seat] === 2) {\r\n      newSeats[row][seat] = 0;\r\n    } else if (seats[row][seat] === 3) {\r\n      newSeats[row][seat] = 2;\r\n    } else {\r\n      newSeats[row][seat] = 2;\r\n    }\r\n    setSelectedSeats([row, seat]);\r\n  };\r\n\r\n  async checkout() {\r\n    const {\r\n      movie,\r\n      cinema,\r\n      selectedSeats,\r\n      selectedDate,\r\n      selectedTime,\r\n      getReservations,\r\n      isAuth,\r\n      user,\r\n      addReservation,\r\n      toggleLoginPopup,\r\n      showInvitationForm,\r\n      setQRCode\r\n    } = this.props;\r\n\r\n    if (selectedSeats.length === 0) return;\r\n    if (!isAuth) return toggleLoginPopup();\r\n\r\n    const response = await addReservation({\r\n      date: selectedDate,\r\n      startAt: selectedTime,\r\n      seats: this.bookSeats(),\r\n      ticketPrice: cinema.ticketPrice,\r\n      total: selectedSeats.length * cinema.ticketPrice,\r\n      movieId: movie._id,\r\n      cinemaId: cinema._id,\r\n      username: user.username,\r\n      phone: user.phone\r\n    });\r\n    if (response.status === 'success') {\r\n      const { data } = response;\r\n      setQRCode(data.QRCode);\r\n      getReservations();\r\n      showInvitationForm();\r\n    }\r\n  }\r\n\r\n  bookSeats() {\r\n    const { cinema, selectedSeats } = this.props;\r\n    const seats = [...cinema.seats];\r\n\r\n    if (selectedSeats.length === 0) return;\r\n\r\n    const bookedSeats = seats\r\n      .map(row =>\r\n        row.map((seat, i) => (seat === 2 ? i : -1)).filter(seat => seat !== -1)\r\n      )\r\n      .map((seats, i) => (seats.length ? seats.map(seat => [i, seat]) : -1))\r\n      .filter(seat => seat !== -1)\r\n      .reduce((a, b) => a.concat(b));\r\n\r\n    return bookedSeats;\r\n  }\r\n\r\n  onFilterCinema() {\r\n    const { cinemas, showtimes, selectedCinema, selectedTime } = this.props;\r\n    const initialReturn = { uniqueCinemas: [], uniqueTimes: [] };\r\n    if (!showtimes || !cinemas) return initialReturn;\r\n\r\n    const uniqueCinemasId = showtimes\r\n      .filter(showtime =>\r\n        selectedTime ? showtime.startAt === selectedTime : true\r\n      )\r\n      .map(showtime => showtime.cinemaId)\r\n      .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const uniqueCinemas = cinemas.filter(cinema =>\r\n      uniqueCinemasId.includes(cinema._id)\r\n    );\r\n\r\n    const uniqueTimes = showtimes\r\n      .filter(showtime =>\r\n        selectedCinema ? selectedCinema === showtime.cinemaId : true\r\n      )\r\n      .map(showtime => showtime.startAt)\r\n      .filter((value, index, self) => self.indexOf(value) === index)\r\n      .sort(\r\n        (a, b) => new Date('1970/01/01 ' + a) - new Date('1970/01/01 ' + b)\r\n      );\r\n\r\n    return { ...initialReturn, uniqueCinemas, uniqueTimes };\r\n  }\r\n\r\n  onGetReservedSeats = () => {\r\n    const { reservations, cinema, selectedDate, selectedTime } = this.props;\r\n\r\n    if (!cinema) return [];\r\n    const newSeats = [...cinema.seats];\r\n\r\n    const filteredReservations = reservations.filter(\r\n      reservation =>\r\n        new Date(reservation.date).toLocaleDateString() ===\r\n          new Date(selectedDate).toLocaleDateString() &&\r\n        reservation.startAt === selectedTime\r\n    );\r\n    if (filteredReservations.length && selectedDate && selectedTime) {\r\n      const reservedSeats = filteredReservations\r\n        .map(reservation => reservation.seats)\r\n        .reduce((a, b) => a.concat(b));\r\n      reservedSeats.forEach(([row, seat]) => (newSeats[row][seat] = 1));\r\n      return newSeats;\r\n    }\r\n    return newSeats;\r\n  };\r\n\r\n  onGetSuggestedSeats = (seats, suggestedSeats) => {\r\n    const { numberOfTickets, positions } = suggestedSeats;\r\n\r\n    const positionsArray = Object.keys(positions).map(key => {\r\n      return [String(key), positions[key]];\r\n    });\r\n\r\n    positionsArray.sort((a, b) => {\r\n      return b[1] - a[1];\r\n    });\r\n\r\n    if (positionsArray.every(position => position[1] === 0)) return;\r\n\r\n    const step = Math.round(seats.length / 3);\r\n    let indexArr = [];\r\n    let suggested;\r\n    for (let position of positionsArray) {\r\n      switch (position[0]) {\r\n        case 'front':\r\n          indexArr = [0, step];\r\n          suggested = this.checkSeats(indexArr, seats, numberOfTickets);\r\n          break;\r\n        case 'center':\r\n          indexArr = [step, step * 2];\r\n          suggested = this.checkSeats(indexArr, seats, numberOfTickets);\r\n          break;\r\n        case 'back':\r\n          indexArr = [step * 2, step * 3];\r\n          suggested = this.checkSeats(indexArr, seats, numberOfTickets);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      if (suggested) this.getSeat(suggested, seats, numberOfTickets);\r\n      break;\r\n    }\r\n  };\r\n\r\n  checkSeats = (indexArr, seats, numberOfTickets) => {\r\n    for (let i = indexArr[0]; i < indexArr[1]; i++) {\r\n      for (let seat in seats[i]) {\r\n        let seatNum = Number(seat);\r\n\r\n        if (\r\n          !seats[i][seatNum] &&\r\n          seatNum + (numberOfTickets - 1) <= seats[i].length\r\n        ) {\r\n          let statusAvailability = [];\r\n          for (let y = 1; y < numberOfTickets; y++) {\r\n            //check the next seat if available\r\n            if (!seats[i][seatNum + y]) {\r\n              statusAvailability.push(true);\r\n            } else {\r\n              statusAvailability.push(false);\r\n            }\r\n          }\r\n          if (statusAvailability.every(Boolean)) return [i, seatNum];\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  getSeat = (suggested, seats, numberOfTickets) => {\r\n    const { setSuggestedSeats } = this.props;\r\n    for (let i = suggested[1]; i < suggested[1] + numberOfTickets; i++) {\r\n      const seat = [suggested[0], i];\r\n      setSuggestedSeats(seat);\r\n    }\r\n  };\r\n\r\n  onChangeCinema = event => this.props.setSelectedCinema(event.target.value);\r\n  onChangeDate = date => this.props.setSelectedDate(date);\r\n  onChangeTime = event => this.props.setSelectedTime(event.target.value);\r\n\r\n  sendInvitations = async () => {\r\n    const invitations = this.createInvitations();\r\n    if (!invitations) return;\r\n    try {\r\n      const token = localStorage.getItem('jwtToken');\r\n      const url = '/invitations';\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(invitations)\r\n      });\r\n      if (response.ok) {\r\n        this.props.resetCheckout();\r\n        this.props.setAlert('invitations Send', 'success', 5000);\r\n        return { status: 'success', message: 'invitations Send' };\r\n      }\r\n    } catch (error) {\r\n      this.props.setAlert(error.message, 'error', 5000);\r\n      return {\r\n        status: 'error',\r\n        message: ' invitations have not send, try again.'\r\n      };\r\n    }\r\n  };\r\n\r\n  createInvitations = () => {\r\n    const {\r\n      user,\r\n      movie,\r\n      cinema,\r\n      selectedDate,\r\n      selectedTime,\r\n      invitations\r\n    } = this.props;\r\n\r\n    const invArray = Object.keys(invitations)\r\n      .map(key => ({\r\n        to: invitations[key],\r\n        host: user.name,\r\n        movie: movie.title,\r\n        time: selectedTime,\r\n        date: new Date(selectedDate).toDateString(),\r\n        cinema: cinema.name,\r\n        image: cinema.image,\r\n        seat: key\r\n      }))\r\n      .filter(inv => inv.to !== '');\r\n    return invArray;\r\n  };\r\n\r\n  setSuggestionSeats = (seats, suggestedSeats) => {\r\n    suggestedSeats.forEach(suggestedSeat => {\r\n      seats[suggestedSeat[0]][suggestedSeat[1]] = 3;\r\n    });\r\n    return seats;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      classes,\r\n      user,\r\n      movie,\r\n      cinema,\r\n      showtimes,\r\n      selectedSeats,\r\n      selectedCinema,\r\n      selectedDate,\r\n      selectedTime,\r\n      showLoginPopup,\r\n      toggleLoginPopup,\r\n      showInvitation,\r\n      invitations,\r\n      setInvitation,\r\n      resetCheckout,\r\n      suggestedSeats,\r\n      suggestedSeat\r\n    } = this.props;\r\n    const { uniqueCinemas, uniqueTimes } = this.onFilterCinema();\r\n    let seats = this.onGetReservedSeats();\r\n    if (suggestedSeats && selectedTime && !suggestedSeat.length) {\r\n      this.onGetSuggestedSeats(seats, suggestedSeats);\r\n    }\r\n    if (suggestedSeat.length && !this.didSetSuggestion) {\r\n      seats = this.setSuggestionSeats(seats, suggestedSeat);\r\n      this.didSetSuggestion = true;\r\n    }\r\n\r\n    return (\r\n      <Container maxWidth=\"xl\" className={classes.container}>\r\n        <Grid container spacing={2} style={{ height: '100%' }}>\r\n          <MovieInfo movie={movie} />\r\n          <Grid item lg={9} xs={12} md={12}>\r\n            <BookingForm\r\n              cinemas={uniqueCinemas}\r\n              times={uniqueTimes}\r\n              showtimes={showtimes}\r\n              selectedCinema={selectedCinema}\r\n              selectedDate={selectedDate}\r\n              selectedTime={selectedTime}\r\n              onChangeCinema={this.onChangeCinema}\r\n              onChangeDate={this.onChangeDate}\r\n              onChangeTime={this.onChangeTime}\r\n            />\r\n            {showInvitation && !!selectedSeats.length && (\r\n              <BookingInvitation\r\n                selectedSeats={selectedSeats}\r\n                sendInvitations={this.sendInvitations}\r\n                ignore={resetCheckout}\r\n                invitations={invitations}\r\n                onSetInvitation={setInvitation}\r\n                onDownloadPDF={this.jsPdfGenerator}\r\n              />\r\n            )}\r\n\r\n            {cinema && selectedCinema && selectedTime && !showInvitation && (\r\n              <>\r\n                <BookingSeats\r\n                  seats={seats}\r\n                  onSelectSeat={(indexRow, index) =>\r\n                    this.onSelectSeat(indexRow, index)\r\n                  }\r\n                />\r\n                <BookingCheckout\r\n                  user={user}\r\n                  ticketPrice={cinema.ticketPrice}\r\n                  seatsAvailable={cinema.seatsAvailable}\r\n                  selectedSeats={selectedSeats.length}\r\n                  onBookSeats={() => this.checkout()}\r\n                />\r\n              </>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <ResponsiveDialog\r\n          id=\"Edit-cinema\"\r\n          open={showLoginPopup}\r\n          handleClose={() => toggleLoginPopup()}\r\n          maxWidth=\"sm\">\r\n          <LoginForm />\r\n        </ResponsiveDialog>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nBookingPage.propTypes = {\r\n  className: PropTypes.string,\r\n  classes: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (\r\n  {\r\n    authState,\r\n    movieState,\r\n    cinemaState,\r\n    showtimeState,\r\n    reservationState,\r\n    checkoutState\r\n  },\r\n  ownProps\r\n) => ({\r\n  isAuth: authState.isAuthenticated,\r\n  user: authState.user,\r\n  movie: movieState.selectedMovie,\r\n  cinema: cinemaState.selectedCinema,\r\n  cinemas: cinemaState.cinemas,\r\n  showtimes: showtimeState.showtimes.filter(\r\n    showtime => showtime.movieId === ownProps.match.params.id\r\n  ),\r\n  reservations: reservationState.reservations,\r\n  selectedSeats: checkoutState.selectedSeats,\r\n  suggestedSeat: checkoutState.suggestedSeat,\r\n  selectedCinema: checkoutState.selectedCinema,\r\n  selectedDate: checkoutState.selectedDate,\r\n  selectedTime: checkoutState.selectedTime,\r\n  showLoginPopup: checkoutState.showLoginPopup,\r\n  showInvitation: checkoutState.showInvitation,\r\n  invitations: checkoutState.invitations,\r\n  QRCode: checkoutState.QRCode,\r\n  suggestedSeats: reservationState.suggestedSeats\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getMovie,\r\n  getCinema,\r\n  getCinemasUserModeling,\r\n  getCinemas,\r\n  getShowtimes,\r\n  getReservations,\r\n  getSuggestedReservationSeats,\r\n  addReservation,\r\n  setSelectedSeats,\r\n  setSuggestedSeats,\r\n  setSelectedCinema,\r\n  setSelectedDate,\r\n  setSelectedTime,\r\n  setInvitation,\r\n  toggleLoginPopup,\r\n  showInvitationForm,\r\n  resetCheckout,\r\n  setAlert,\r\n  setQRCode\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(styles)(BookingPage));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}