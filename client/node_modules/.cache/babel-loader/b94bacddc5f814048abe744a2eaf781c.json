{"ast":null,"code":"import { GET_MOVIES, SELECT_MOVIE, GET_SUGGESTIONS } from '../types';\nimport { setAlert } from './alert';\nexport const uploadMovieImage = (id, image) => async dispatch => {\n  try {\n    const data = new FormData();\n    data.append('file', image);\n    const url = '/movies/photo/' + id;\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data\n    });\n    const responseData = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\n    }\n    if (responseData.error) {\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getMovies = () => async dispatch => {\n  try {\n    const url = '/movies';\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const movies = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: GET_MOVIES,\n        payload: movies\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const onSelectMovie = movie => ({\n  type: SELECT_MOVIE,\n  payload: movie\n});\nexport const getMovie = id => async dispatch => {\n  try {\n    const url = '/movies/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const movie = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: SELECT_MOVIE,\n        payload: movie\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const getMovieSuggestion = id => async dispatch => {\n  try {\n    const url = '/movies/usermodeling/' + id;\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const movies = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: GET_SUGGESTIONS,\n        payload: movies\n      });\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const addMovie = (image, newMovie) => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies';\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newMovie)\n    });\n    const movie = await response.json();\n    if (response.ok) {\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\n      if (image) dispatch(uploadMovieImage(movie._id, image));\n      dispatch(getMovies());\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const updateMovie = (movieId, movie, image) => async dispatch => {\n  console.log('in update movie', movieId, movie, image);\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies/' + movieId;\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(movie)\n    });\n    if (response.ok) {\n      dispatch(onSelectMovie(null));\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\n      console.log('about to call uploadimage');\n      if (image) dispatch(uploadMovieImage(movieId, image));\n      dispatch(getMovies());\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};\nexport const removeMovie = movieId => async dispatch => {\n  try {\n    const token = localStorage.getItem('jwtToken');\n    const url = '/movies/' + movieId;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      dispatch(getMovies());\n      dispatch(onSelectMovie(null));\n      dispatch(setAlert('Movie have been Deleted!', 'success', 5000));\n    }\n  } catch (error) {\n    dispatch(setAlert(error.message, 'error', 5000));\n  }\n};","map":{"version":3,"names":["GET_MOVIES","SELECT_MOVIE","GET_SUGGESTIONS","setAlert","uploadMovieImage","id","image","dispatch","data","FormData","append","url","response","fetch","method","body","responseData","json","ok","error","message","getMovies","headers","movies","type","payload","onSelectMovie","movie","getMovie","getMovieSuggestion","addMovie","newMovie","token","localStorage","getItem","Authorization","JSON","stringify","_id","updateMovie","movieId","console","log","removeMovie"],"sources":["C:/Kuliah/Semester 6/Topik Khusus/MovieStore/client/src/store/actions/movies.js"],"sourcesContent":["import { GET_MOVIES, SELECT_MOVIE,GET_SUGGESTIONS } from '../types';\r\nimport { setAlert } from './alert';\r\n\r\nexport const uploadMovieImage = (id, image) => async dispatch => {\r\n  try {\r\n    const data = new FormData();\r\n    data.append('file', image);\r\n    const url = '/movies/photo/' + id;\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      body: data\r\n    });\r\n    const responseData = await response.json();\r\n    if (response.ok) {\r\n      dispatch(setAlert('Image Uploaded', 'success', 5000));\r\n    }\r\n    if (responseData.error) {\r\n      dispatch(setAlert(responseData.error.message, 'error', 5000));\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n\r\nexport const getMovies = () => async dispatch => {\r\n  try {\r\n    const url = '/movies';\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const movies = await response.json();\r\n    if (response.ok) {\r\n      dispatch({ type: GET_MOVIES, payload: movies });\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n\r\nexport const onSelectMovie = movie => ({\r\n  type: SELECT_MOVIE,\r\n  payload: movie\r\n});\r\n\r\nexport const getMovie = id => async dispatch => {\r\n  try {\r\n    const url = '/movies/' + id;\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const movie = await response.json();\r\n    if (response.ok) {\r\n      dispatch({ type: SELECT_MOVIE, payload: movie });\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n\r\nexport const getMovieSuggestion = id => async dispatch => {\r\n  try {\r\n    const url = '/movies/usermodeling/' + id;\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const movies = await response.json();\r\n    if (response.ok) {\r\n      dispatch({ type: GET_SUGGESTIONS, payload: movies });\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n\r\nexport const addMovie = (image, newMovie) => async dispatch => {\r\n  try {\r\n    const token = localStorage.getItem('jwtToken');\r\n    const url = '/movies';\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(newMovie)\r\n    });\r\n    const movie = await response.json();\r\n    if (response.ok) {\r\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\r\n      if (image) dispatch(uploadMovieImage(movie._id, image));\r\n      dispatch(getMovies());\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n\r\nexport const updateMovie = (movieId, movie, image) => async dispatch => {\r\n  console.log('in update movie',movieId, movie, image);\r\n  try {\r\n    const token = localStorage.getItem('jwtToken');\r\n    const url = '/movies/' + movieId;\r\n    const response = await fetch(url, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(movie)\r\n    });\r\n    if (response.ok) {\r\n      dispatch(onSelectMovie(null));\r\n      dispatch(setAlert('Movie have been saved!', 'success', 5000));\r\n      console.log('about to call uploadimage')\r\n      if (image) dispatch(uploadMovieImage(movieId, image));\r\n      dispatch(getMovies());\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n\r\nexport const removeMovie = movieId => async dispatch => {\r\n  try {\r\n    const token = localStorage.getItem('jwtToken');\r\n    const url = '/movies/' + movieId;\r\n    const response = await fetch(url, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    if (response.ok) {\r\n      dispatch(getMovies());\r\n      dispatch(onSelectMovie(null));\r\n      dispatch(setAlert('Movie have been Deleted!', 'success', 5000));\r\n    }\r\n  } catch (error) {\r\n    dispatch(setAlert(error.message, 'error', 5000));\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}